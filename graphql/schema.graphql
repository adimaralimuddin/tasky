### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Card {
  Dashboard: Dashboard
  _count: Count
  backs: [Field]
  category: String
  classId: String
  def: Boolean
  description: String
  fronts: [Field]
  id: String
  ind: String
  level: String
  name: String
  sample: Boolean
  topicId: String
  userId: String
}

type Class {
  description: String
  folders: [Folder]
  id: String
  name: String
  sample: Boolean
  userId: String
}

input CommentInputType {
  id: String!
  ind: Int!
  text: String!
  type: String!
  value: String!
  viewId: String!
}

type Count {
  id: Int
}

type Dashboard {
  _count: Count
  category: String
  level: String
}

type DbResponse {
  isError: Boolean
  msg: String
}

type Field {
  backId: String
  frontId: String
  id: String
  ind: Int
  text: String
  type: String
  value: String
  viewId: String
}

input FieldListInputType {
  text: String
  type: String
  view: Boolean
  viewId: String
}

type Folder {
  class: Class
  classId: String
  id: String
  name: String
  sample: Boolean
  topics: [Topic]
  userId: String
}

type Mutation {
  addCard(backs: [CommentInputType], category: String = "new", classId: String!, description: String, fronts: [CommentInputType], id: String!, ind: Int!, level: String = "hard", name: String!, topicId: String!, userId: String): Card
  addField(backId: String, frontId: String, id: String!, ind: Int!, text: String!, type: String!, value: String!, viewId: String!): Field
  addStat(classId: String!, easy: Int!, easyCards: [String], hard: Int!, hardCards: [String], normal: Int!, normalCards: [String], time: String!): Stats
  addTopic(classId: String!, description: String, folderId: String!, id: String!, name: String!, templateId: String!, userId: String): Topic
  createClass(description: String, id: String!, name: String!, userId: String): Class!
  createFieldFront(frontId: String!, ind: Int!, name: String!, type: String!, value: String!, viewId: String!): Field
  createFolder(classId: String!, name: String!, userId: String): Folder
  createTemplate(backs: [FieldListInputType], fronts: [FieldListInputType], name: String!, userId: String!): Template
  createUser(email: String!, id: String!, name: String!): User!
  deleteCard(cardId: String!, classId: String!, userId: String): Card
  deleteClass(classId: String!): Class
  deleteFolder(classId: String!, id: String!, userId: String): Folder
  deleteTemplate(templateId: String!): Template
  deleteTopic(classId: String!, topicId: String!, userId: String): Topic
  deleteUser(id: String!): User
  renameClass(classId: String!, name: String!): Class
  renameFolder(classId: String!, folderId: String!, name: String!, userId: String!): Folder
  renameTopic(classId: String!, name: String!, topicId: String!, userId: String): Topic
  setCardLevel(cardId: String!, classId: String!, level: String, userId: String): Card
  updateClass(classId: String!, description: String, name: String): Class
  updateField(id: String!, newValue: String!, val: String!): Field
  updateTemplate(backs: [FieldListInputType], fronts: [FieldListInputType], id: String!, name: String!, userId: String!): Template
  updateUser(id: String!, name: String!): User!
}

type Query {
  cardsByField(classId: String!, field: String!, value: String!): [Card]
  cardsByIds(ids: [String]): [Card]
  cardsByTopic(topicId: String!): [Card]
  class(id: String!): Class
  classDashboard(id: String!): Class
  dashboard(classId: String!): [Card]
  foldersByClass(classId: String!): [Folder]
  getTest: TestResponse
  sampleClasses: [Class]
  sampleTemplates: [Template]
  stats(classId: String!): [Stats]
  template(id: String!): Template
  templates(userId: String!): [Template]
  topic(topicId: String!): Topic
  topicsByFolders(folderId: String!): [Topic]
  user(userId: String): User
  userByDbid(id: String!): User
  userClasses(userId: String!): [Class]
  userTopic(userId: String!): [Topic]
  users: [User]!
}

type Stats {
  classId: String
  easy: Int
  easyCards: [String]
  hard: Int
  hardCards: [String]
  normal: Int
  normalCards: [String]
  time: String
}

type Template {
  backs: String
  deleted: Boolean
  fronts: String
  id: String
  name: String
  sample: Boolean
  userId: String
}

type Test {
  good: String
}

type TestFailed {
  msg: String
}

union TestResponse = Test | TestFailed

type Topic {
  cards: [Card]
  classId: String
  description: String
  folderId: String
  id: String
  name: String
  sample: Boolean
  template: Template
  templateId: String
  userId: String
}

type User {
  class: [Class]
  dbid: String
  email: String
  id: String
  name: String
}